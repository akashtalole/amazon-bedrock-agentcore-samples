# Guides

- [What is Amazon Bedrock AgentCore?](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/what-is-bedrock-agentcore.html): Learn about AWS Amazon Bedrock AgentCore, a service that provides enterprise-grade primitives for securely building, deploying, and running agent or tools in production.
- [AWS Regions](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/agentcore-regions.html): This section provides information about AWS Regions that Amazon Bedrock AgentCore is availabile in.
- [Host agent or tools with Amazon Bedrock AgentCore Runtime](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/agents-tools-runtime.html): Learn how to host agents or tools using Amazon Bedrock AgentCore Runtime, a secure, serverless runtime purpose-built for deploying and scaling dynamic AI agents and tools.
- [Deleting an AgentCore Browser](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-delete.html): When you no longer need a browser tool, you can delete it to free up resources. Before deleting a browser tool, make sure to stop all active sessions associated with it.
- [Get AgentCore Browser tool](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-get.html): You can get information about the Browser tool in your account and view their details, status, and configurations.
- [Listing AgentCore Browser tools](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-list.html): You can list all browser tools in your account to view their details, status, and configurations.
- [Resource and session management](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-resource-session-management.html): The following topics show how the Amazon Bedrock AgentCore Browser works and how you can create the resources and manage sessions.
- [Resource management](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-resource-management.html): The AgentCore Browser provides two types of resources:
- [Session management](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-session-characteristics.html): The AgentCore Browser sessions have the following characteristics:
- [Getting Started with AgentCore Browser](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-onboarding.html): The following sections show how you can get started with the AgentCore Browser tool.
- [Get Browser session](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-session-get.html): You can get information about a browser session that you have created.
- [Listing browser sessions](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-list-sessions.html): You can list all active browser sessions to monitor and manage your resources. This is useful for tracking active sessions, identifying long-running sessions, or finding sessions that need to be stopped.
- [Observability and session replay](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-observability.html): The AgentCore Browser provides the following observability features:
- [Starting a browser session](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-start-session.html): After creating a browser, you can start a session to interact with web applications.
- [Interact with web applications using Amazon Bedrock AgentCore Browser](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-tool.html): Learn how to use the AgentCore Browser built-in tool in Amazon Bedrock AgentCore to interact with web applications in a secure environment.
- [Stopping a browser session](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-stop-session.html): When you are finished using a Browser session, you should stop it to release resources and avoid unnecessary charges.
- [Updating browser streams](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-update-stream.html): You can update browser streams to enable or disable automation. This is useful when you need to enter sensitive information like login credentials that you don
- [Delete memory records](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/delete-memory-records.html): Learn how to remove specific memory records from AgentCore Memory.
- [Create AgentCore Memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/create-memory.html): Learn how to create a new AgentCore Memory resource.
- [Configure AgentCore Memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/configure-memory.html): Learn how to configure AgentCore Memory settings for your AI agent.
- [Extraction prompts](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/custom-prompts-extraction.html): Learn how to customize prompts for extracting and consolidating different types of memory.
- [Delete AgentCore Memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/delete-memory.html): Learn how to delete an AgentCore Memory resource when it
- [Prompts for custom memory strategies](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/custom-prompts.html): Learn how to customize prompts for extracting and consolidating different types of memory.
- [Setting up a Amazon Bedrock AgentCore Gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-building.html): This chapter provides detailed guidance on building with Amazon Bedrock AgentCore Gateway, including creating gateways, adding targets, and connecting agents.
- [Setting up inbound Auth](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-inbound-auth.html): Before creating your Gateway, you need to set up inbound auth to validate callers attempting to access targets through your Amazon Bedrock AgentCore Gateway.
- [Using a Gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-using.html): This chapter explains how to use a Amazon Bedrock AgentCore Gateway to connect agents with tools and resources.
- [Getting started with AgentCore Memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/memory-getting-started.html): This section walks you through the process of installing dependencies and implementing both short-term and long-term memory features for your AI agents.
- [Long-term memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/long-term-memory.html): Learn how long-term memory stores structured information extracted from raw agent interactions.
- [List AgentCore Memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/list-memory.html): Learn how to list all available AgentCore Memory resources in your account.
- [List memory records](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/list-memory-records.html): Learn how to list memory records from a specific namespace.
- [Get AgentCore Memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/get-memory.html): Learn how to retrieve information about an existing AgentCore Memory.
- [Amazon Bedrock AgentCore Gateway: Securely connect tools and other resources to your Gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway.html): This chapter explains how your agent can call tools through a Amazon Bedrock AgentCore gateway.
- [Getting started with Amazon Bedrock AgentCore Runtime](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-getting-started.html): Learn how Amazon Bedrock AgentCore Runtime lets you use any agent framework
- [Add memory to your AI agent](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/memory.html): Learn how to useAgentCore Memory to enable your AI agents to retain knowledge and build context over time.
- [Memory strategies](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/memory-strategies.html): Learn about different memory strategies for processing information from conversations into long-term memory.
- [Retrieve memory records](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/retrieve-memory-records.html): Learn how to search for relevant memory records using semantic queries.
- [Get started with the Amazon Bedrock AgentCore Runtime starter toolkit](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-getting-started-toolkit.html): This guide walks you through the process of preparing, deploying, and invoking your agent using Amazon Bedrock AgentCore.
- [Use isolated sessions for agents](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-sessions.html): Learn how to use isolated sessions to maintain context across multiple invocations while ensuring complete security and data isolation between users.
- [Troubleshoot AgentCore Runtime](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-troubleshooting.html): This guide provides solutions to common issues when working with AgentCore Runtime. It covers deployment problems, invocation errors, and container-related issues to help you quickly diagnose and resolve problems with your agent runtimes.
- [Observe agents in Amazon Bedrock AgentCore Runtime](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-observability.html): Learn how to monitor, track, and understand the internal decision-making processes and behaviors of your agents.
- [Memory scoping with namespaces](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/session-actor-namespace.html): Understand how sessions, actors, and namespaces organize memory in AgentCore Memory.
- [Permissions for AgentCore Runtime](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-permissions.html): To run agent or tool in AgentCore Runtime you need an AWS Identity and Access Management execution role. For information about creating an IAM role, see IAM role creation .
- [Authenticate and authorize with Inbound Auth and Outbound Auth](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-oauth.html): Learn how to set up authentication and authorization for your agent runtime using OAuth and JWT bearer tokens.
- [Storage encryption and security](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/storage-encryption.html): Learn about encryption options and security best practices for AgentCore Memory.
- [Update AgentCore Memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/update-memory.html): Learn how to modify an existing AgentCore Memory configuration.
- [Short-term memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/short-term-memory.html): Learn how short-term memory stores raw interactions to maintain context.
- [System prompts (non-editable) for extraction and consolidation](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/system-prompts.html): Learn about the non-editable system prompts that are appended to your custom prompts.

# Examples

- [Building browser agents](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-building-agents.html): You can build browser agents using various frameworks and libraries to automate web interactions. This section demonstrates how to build browser agents using different frameworks.
- [Run code in Code Interpreter from Agents](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-building-agents.html): You can build agents that use the Code Interpreter tool to execute code and analyze data. This section demonstrates how to build agents using different frameworks.
- [Use cases and code examples](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-use-cases.html): The AgentCore Browser can be used for a wide range of use cases, enabling AI agents to interact with web applications just as humans do. This section describes common use cases and provides Python code examples for implementation provided in conjunction with the Amazon Bedrock AgentCore SDK.
- [Creating an AgentCore Code Interpreter](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-create.html): You can create a Code Interpreter using the Amazon Bedrock AgentCore console, AWS CLI, or AWS SDK.
- [Use Amazon Bedrock AgentCore built-in tools to interact with your applications](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/built-in-tools.html): Amazon Bedrock AgentCore provides several built-in tools to enhance your development and testing experience. These tools are designed to help you interact with your application in various ways, providing capabilities for code execution and web browsing within the Amazon Bedrock AgentCore environment.
- [Code Interpreter API Reference Examples](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-api-reference-examples.html): This section provides reference examples for common Code Interpreter operations using different approaches. Each example shows how to perform the same operation using AWS CLI, Boto3 SDK, and direct API calls.
- [Deleting an AgentCore Code Interpreter](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-delete.html): When you no longer need a Code Interpreter, you can delete it to free up resources and avoid unnecessary charges.
- [Executing code](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-execute-code.html): Once you have started a Code Interpreter session, you can execute code in the session.
- [Resource management](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-resource-management.html): The AgentCore Code Interpreter provides two types of resources:
- [Resource and session management](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-resource-session-management.html): The following topics show how the Amazon Bedrock AgentCore Code Interpreter works and how you can create the resources and manage sessions.
- [Stopping a AgentCore Code Interpreter session](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-stop-session.html): When you are finished using a Code Interpreter session, you should stop it to release resources and avoid unnecessary charges.
- [Listing AgentCore Code Interpreter tools](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-list.html): You can view a list of all your Code Interpreter tools to manage and monitor them.
- [Getting started with AgentCore Code Interpreter by running a hello world example](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-getting-started.html): The following sections show how you can get started with the AgentCore Code Interpreter tool.
- [Read from or write files to a session](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-file-operations.html): You can use the Code Interpreter to read and write files in the sandbox environment. This allows you to upload data files, process them with code, and retrieve the results.
- [Using Terminal Commands with an execution role](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-s3-integration.html): You can create a custom Code Interpreter tool with an execution role to upload/download files from Amazon S3. This allows your code to interact with S3 buckets for storing and retrieving data.
- [Starting a AgentCore Code Interpreter session](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-start-session.html): After creating a Code Interpreter, you can start a session to execute code.
- [Session management](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-session-characteristics.html): The AgentCore Code Interpreter sessions have the following characteristics:
- [Execute code and analyze data using Amazon Bedrock AgentCore Code Interpreter](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/code-interpreter-tool.html): Learn how to use the code interpreter built-in tool in Amazon Bedrock AgentCore to execute code, analyze data.
- [Adding Lambda targets to your gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-add-target-lambda.html): Lambda targets allow you to connect your gateway to AWS Lambda functions that implement your tools. This is useful when you want to execute custom code in response to tool invocations.
- [Quick Start with creating and using a Gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-quick-start.html): This section provides quick start examples for creating a gateway and using it with different frameworks.
- [Consolidation prompts](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/memory-consolidation-prompts.html): The consolidation step identifies if existing memories with the same namespace should be deleted or updated. AgentCore Memory checks that new memories are not duplicated or contradicting before merging them with existing memories. This is needed for Semantic or User Preference strategy. The below are sample prompts for consolidation. These can be used in &quot;appendToPrompt&quot; field in SemanticOverrideConsolidationConfiguration, UserPreferenceConsolidationConfiguration, or SummaryConsolidationConfiguration within CustomMemoryStrategy in
- [Stream agent responses](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/response-streaming.html): The following Strands Agents example shows how an AgentCore Runtime agent can stream a response back to a client.
- [Putting it all together: A customer support AI agent](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/putting-it-together.html): See how short-term and long-term memory work together in a practical example.

# Concepts

- [Core concepts for Amazon Bedrock AgentCore Gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-core-concepts.html): This chapter explains the core concepts of Amazon Bedrock AgentCore Gateway, including Gateway, Gateway Target, and Authorization.
- [Setting up Outbound Auth](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-outbound-auth.html): Outbound Auth lets Amazon Bedrock AgentCore gateways securely access gateway targets on behalf of users authenticated and authorized during Inbound Auth . For more information on Auth overview, see .
- [How it works](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-how-it-works.html): Learn how the AgentCore Runtime provides a fully managed, purpose-built environment for deploying and running AI agents or tools in the cloud.
- [Prerequisites](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/prerequisites.html): Learn about important concepts before using AgentCore Memory.
- [Understanding the AgentCore Runtime service contract](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-service-contract.html): Learn about the Amazon Bedrock AgentCore service contract that defines the standardized communication protocol for your agent applications to integrate with the AgentCore Runtime hosting.

# Reference

- [Rendering live view using AWS DCV Web Client](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-dcv-integration.html): Amazon Bedrock AgentCore
- [AgentCore Runtime versioning and endpoints](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/agent-runtime-versioning.html): Learn how Amazon Bedrock AgentCore implements automatic versioning for agent runtimes and how to manage different configurations using endpoints.
- [Creating an AgentCore Browser](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-create.html): You can create a Browser Tool using the Amazon Bedrock AgentCore console, AWS CLI, or AWS SDK.
- [Interacting with a browser session](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/browser-interact.html): Once you have started a Browser session, you can interact with it using the WebSocket API.
- [Creating gateways](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/create-gateway.html): This guide walks you through the process of creating and configuring an Amazon Bedrock AgentCore Gateway. The Gateway serves as a unified entry point for agents to access tools and resources through the Model Context Protocol (MCP) and creating it is the first step in building your tool integration platform. When you create a gateway, you establish a managed service that handles authentication, request transformation, and routing capabilities across your infrastructure.
- [Creating your Gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/create-gateway-methods.html): Once you have set up your identity provider, you can create your Gateway using one of the following methods:
- [Adding targets to an existing gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-building-adding-targets.html): After , you can add targets which define the tools that your gateway will host. Gateway supports multiple target types including Lambda functions and API specifications (either OpenAPI schemas or Smithy models). Gateway allows you to attach multiple targets to a Gateway and you can change the targets / tools attached to a gateway at any point. Each target can have its own credential provider attached enabling you to securely access targets whether they need IAM, API Key, or OAuth credentials. Note: the authorization grant flow (three-legged OAuth) is not supported as a target credential type.
- [Prerequisites to set up a gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-prerequisites-permissions.html): Amazon Bedrock AgentCore Gateway can connect to both AWS resources and external services. This means that along with the standard AWS Identity and Access Management (IAM) for managing permissions in Amazon Bedrock AgentCore Gateway, the permissions model supports additional external authentication mechanisms.
- [Adding Smithy targets to your Gateway](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-building-smithy-targets.html): Smithy is a language for defining services and SDKs that works well with Gateway. Smithy models provide a more structured approach to defining APIs compared to OpenAPI, and are particularly useful for connecting to AWS services.
- [Adding an OpenAPI target](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-schema-openapi.html): OpenAPI (formerly known as Swagger) is a widely used standard for describing RESTful APIs. Gateway supports OpenAPI 3.0 specifications for defining API targets.
- [Using a Gateway with MCP](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/gateway-using-mcp.html): Gateway implements the Model Context Protocol (MCP), which provides a standardized way for agents to discover and invoke tools. The gateway exposes two main MCP operations:
- [Store and use long-term memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/long-term-memory-operations.html): Learn how to access and manage long-term memory records.
- [Getting started without the starter toolkit](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/getting-started-custom.html): Learn how to deploy a custom agent to AgentCore Runtime using FastAPI and Docker. This guide walks you through creating, testing, and deploying a containerized agent that meets the Amazon Bedrock AgentCore requirements.
- [How it works](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/memory-overview.html): Learn how AgentCore Memory APIs work together to provide memory capabilities for your AI agents.
- [Invoke an AgentCore Runtime agent](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-invoke-agent.html): Learn how to use the InvokeAgentRuntime operation to send requests to agent runtime endpoints and receive streaming responses.
- [Handle asynchronous and long running agents with Amazon Bedrock AgentCore Runtime](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-long-run.html): Learn how to implement asynchronous processing in the Amazon Bedrock AgentCore SDK to handle long-running operations without blocking responses.
- [Deploy MCP servers in AgentCore Runtime](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-mcp.html): Learn how to create, test, and deploy your first Model Context Protocol (MCP) server using the AgentCore Runtime.
- [Store and use short-term memory](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/short-term-memory-operations.html): Learn how to store and retrieve short-term memory using events.
- [Use any foundation model](https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/using-any-model.html): Learn how Amazon Bedrock AgentCore Runtime lets you use any foundation model

# Resources

- [AWS Support and Customer Service Contact Info | Amazon Web Services](https://aws.amazon.com/contact-us/?cmpid=docs_headercta_contactus): On this page, you’ll find info regarding the different ways to get in touch with AWS support, including Sales, Technical, Compliance, and Login support.
- [AWS Accessibility – Amazon Web Services](https://aws.amazon.com/accessibility/?nc1=f_cc): Our vision is to be Earth’s most customer-centric company. For AWS, that means making cloud computing accessible to everyone.

